/*
LaTeX Package keymap
*/
[
	// Show panel
	{ "keys": ["shift+escape"],
		"context": [
			{"key": "selector", "operator": "equal", "operand": "text.tex.latex"},
			{"key": "panel_visible", "operator": "equal", "operand": false }],
		"command": "show_panel", "args": {"panel": "output.latextools"}},

		// Auto-pair ``$''
		// Lifted from default file
	// insert matching $
	// note the "key": "selector" line!
	{ "keys": ["$"], "command": "insert_snippet", "args": {"contents": "\\$$1\\$$0"}, 
	"context":  
		[
			{ "key": "setting.command_mode", "operator": "equal", "operand": false },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			// do not insert this if it is escaped
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "(?:\\\\\\\\)*(?:\\\\|\\$)$", "match_all": true },
			// don't insert, it inside math environments
			{ "key": "selector", "operator": "not_equal", "operand": "meta.environment.math, string.other.math", "match_all": true },
			// don't insert, if there is an open dollar math environment at the end of the line
			{ "key": "eol_selector", "operator": "not_equal", 
			  "operand": "meta.environment.math.inline.dollar - punctuation.definition.string.end, string.other.math - punctuation.definition.string.end",
			  "match_all": true }
		] 
	},
	// fully close $$ environments
	{ "keys": ["$"], "command": "insert", "args": {"characters": "$$"}, 
	"context":
		[
			{ "key": "setting.command_mode", "operator": "equal", "operand": false },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex meta.environment.math.block.dollar" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			// do not insert this if it is escaped
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "(?:\\\\\\\\)*(?:\\\\|\\$)$", "match_all": true }
		]
	},
	// wrap in $
	{ "keys": ["$"], "command": "insert_snippet", "args": {"contents": "\\$${1:$SELECTION}\\$$0"}, "context":
		[
			{ "key": "setting.command_mode", "operator": "equal", "operand": false },
			{"key": "selector", "operator": "equal", "operand": "text.tex.latex"},
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	// move over closing $
	{ "keys": ["$"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[	
			{ "key": "setting.command_mode", "operator": "equal", "operand": false },
			{"key": "selector", "operator": "equal", "operand": "text.tex.latex"},
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\$", "match_all": true }
		]
	},
	// delete $ pair
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
		[
			{"key": "selector", "operator": "equal", "operand": "text.tex.latex"},
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\$$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\$", "match_all": true }
		]
	},

		// overlay specifications (Tobias Schmidt)
	// FIXME: the scope for the four following should actually be text.tex.latex.beamer, but for some reason this does not seem to work
	{ "keys": ["<"], "command": "insert_snippet", "args": {"contents": "<${1:+-}>$0"}, 
	"context":  
		[
			{"key": "selector", "operator": "equal", "operand": "text.tex.latex - (string.other.math, meta.environment.math)"},
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\\\(?:item|only|textbf|color|onslide|only|uncover|visible|invisible|alt|temporal)$", "match_all": true }
		]
	},
	// wrap in <>
	{ "keys": ["<"], "command": "insert_snippet", "args": {"contents": "<${0:$SELECTION}>"}, "context":
		[
			{"key": "selector", "operator": "equal", "operand": "text.tex.latex"},
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	// move over closing >
	{ "keys": [">"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[	
			{"key": "selector", "operator": "equal", "operand": "text.tex.latex"},
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^>", "match_all": true }
		]
	},
	// delete <> pair
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
		[
			{"key": "selector", "operator": "equal", "operand": "text.tex.latex"},
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "<$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^>", "match_all": true }
		]
	},
	// autopair quotation marks (`')
	{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`$0'"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex"},
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},
	{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`${0:$SELECTION}'"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex"},
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["'"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex"},
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true }
		]
	},
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex"},
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "`$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true }
		]
	},
	// automatic addition of new \items when hitting Shift+Enter in a list environment
	{ "keys": ["shift+enter"], "command": "insert_snippet", "args": {"contents": "\n\\item $0"},
	"context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex meta.environment.list, meta.function.environment.list.latex"},
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},
	// create a \item[] in a description environment
	{ "keys": ["shift+enter"], "command": "insert_snippet", "args": {"contents": "\n\\item[$1] $0"},
	"context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex meta.environment.list.description"},
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},


	{ "keys": ["_"], "command": "insert_snippet", "args": {"contents": "_{$1}$0"}, 
	"context":  
		[
			{"key": "selector", "operator": "equal", "operand": "string.other.math, meta.environment.math"},
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	{ "keys": ["^"], "command": "insert_snippet", "args": {"contents": "^{$1}$0"}, 
	"context":  
		[
			{"key": "selector", "operator": "equal", "operand": "string.other.math, meta.environment.math"},
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	{ "keys": ["v", "v"], "command": "insert_snippet", "args": {"contents": "\\vec{$1}$0"}, 
	"context":  
		[
			{"key": "selector", "operator": "equal", "operand": "string.other.math, meta.environment.math"},
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	{ "keys": ["m", "m"], "command": "insert_snippet", "args": {"contents": "\\mat{$1}$0"}, 
	"context":  
		[
			{"key": "selector", "operator": "equal", "operand": "string.other.math, meta.environment.math"},
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	{ "keys": ["t", "t"], "command": "insert_snippet", "args": {"contents": "\\ten{$1}$0"}, 
	"context":  
		[
			{"key": "selector", "operator": "equal", "operand": "string.other.math, meta.environment.math"},
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	{ "keys": ["c", "1"], "command": "insert_snippet", "args": {"contents": "\\\\${1:command}$0"}, 
	"context":  
		[
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},
	{ "keys": ["c", "2"], "command": "insert_snippet", "args": {"contents": "\\\\${1:command}{$2}$0"}, 
	"context":  
		[
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	// delete <> pair
	{ "keys": ["ctrl+d"], "command": "run_macro_file", "args": {"file": "Packages/User/LaTeX/MakeCommand.sublime-macro"}},

	// ctrl+l,backspace to remove temporary files
	{ 	"keys": ["ctrl+l","backspace"], 
		"context":  [
			{"key": "selector", "operator": "equal", "operand": "text.tex.latex"}],
		"command": "delete_temp_files"
    },

	// Delete/clear local Cache
	{ 	"keys": ["ctrl+l","ctrl+d","ctrl+c"], 
		"context":  [
			{"key": "selector", "operator": "equal", "operand": "text.tex.latex"}],
		"command": "clear_local_latex_cache"
    },

	// ctrl+l,w to display word count
	{	"keys": ["ctrl+l", "w"],
		"context":  [
			{"key": "selector", "operator": "equal", "operand": "text.tex.latex"}],
		"command": "texcount" 
    }
]
